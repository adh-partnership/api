basePath: /v1
definitions:
  dto.EventPositionRequest:
    properties:
      cid:
        type: integer
      position:
        type: string
    type: object
  dto.EventRequest:
    properties:
      banner:
        type: string
      description:
        type: string
      end_date:
        type: string
      start_date:
        type: string
      title:
        type: string
    type: object
  dto.EventSignupRequest:
    properties:
      choice1:
        type: string
      choice2:
        type: string
      choice3:
        type: string
      notes:
        type: string
    type: object
  dto.FacilityStaffResponse:
    properties:
      atm:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
      datm:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
      ec:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
      fe:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
      ta:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
      wm:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.FeedbackPatchRequest:
    properties:
      status:
        type: string
    type: object
  dto.FeedbackRequest:
    properties:
      comments:
        type: string
      controller:
        type: integer
      flight_callsign:
        type: string
      flight_date:
        type: string
      position:
        type: string
      rating:
        type: string
    type: object
  dto.FeedbackResponse:
    properties:
      comments:
        type: string
      controller_cid:
        type: integer
      controller_name:
        type: string
      controller_rating:
        type: string
      created_at:
        type: string
      flight_callsign:
        type: string
      flight_date:
        type: string
      id:
        type: integer
      position:
        type: string
      rating:
        type: string
      status:
        type: string
      submitter:
        type: integer
      submitter_name:
        type: string
    type: object
  dto.StorageRequest:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  dto.UserResponse:
    properties:
      certifications:
        $ref: '#/definitions/dto.UserResponseCertifications'
      cid:
        type: integer
      controller_type:
        type: string
      created_at:
        type: string
      discord_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      operating_initials:
        type: string
      rating:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        type: string
      updated_at:
        type: string
    type: object
  dto.UserResponseCertifications:
    properties:
      approach:
        type: string
      delivery:
        type: string
      enroute:
        type: string
      ground:
        type: string
      local:
        type: string
    type: object
  github.com_adh-partnership_api_internal_v1_overflight.Flightsv1:
    properties:
      alt:
        example: 10500
        type: integer
      arr:
        example: KLMO
        type: string
      callsign:
        example: N462AW
        type: string
      cid:
        example: 876594
        type: integer
      dep:
        example: KLMO
        type: string
      facility:
        example: ZDV
        type: string
      hdg:
        example: 180
        type: integer
      lastSeen:
        example: "2020-01-01T00:00:00Z"
        type: string
      lat:
        example: -33.867
        type: number
      lon:
        example: 151.206
        type: number
      route:
        example: DCT
        type: string
      spd:
        example: 150
        type: integer
      type:
        example: C208
        type: string
    type: object
  internal_v1_overflight.Flightsv1:
    properties:
      alt:
        example: 10500
        type: integer
      arr:
        example: KLMO
        type: string
      callsign:
        example: N462AW
        type: string
      cid:
        example: 876594
        type: integer
      dep:
        example: KLMO
        type: string
      facility:
        example: ZDV
        type: string
      hdg:
        example: 180
        type: integer
      lastSeen:
        example: "2020-01-01T00:00:00Z"
        type: string
      lat:
        example: -33.867
        type: number
      lon:
        example: 151.206
        type: number
      route:
        example: DCT
        type: string
      spd:
        example: 150
        type: integer
      type:
        example: C208
        type: string
    type: object
  models.Document:
    properties:
      category:
        example: sops
        type: string
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      created_by:
        $ref: '#/definitions/models.User'
      created_by_id:
        example: 1
        type: integer
      description:
        example: Description of document
        type: string
      id:
        example: 1
        type: integer
      name:
        example: document name
        type: string
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      updated_by:
        $ref: '#/definitions/models.User'
      updated_by_id:
        example: 1
        type: integer
      url:
        example: https://www.example.com/document.pdf
        type: string
    type: object
  models.Event:
    properties:
      banner:
        type: string
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      positions:
        items:
          $ref: '#/definitions/models.EventPosition'
        type: array
      signups:
        items:
          $ref: '#/definitions/models.EventSignup'
        type: array
      start_date:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.EventPosition:
    properties:
      created_at:
        type: string
      id:
        type: integer
      position:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.EventSignup:
    properties:
      choice1:
        type: string
      choice2:
        type: string
      choice3:
        type: string
      created_at:
        type: string
      id:
        type: integer
      notes:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Rating:
    properties:
      id:
        example: 1
        type: integer
      long:
        example: Observer
        type: string
      short:
        example: OBS
        type: string
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: wm
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.User:
    properties:
      appCertification:
        description: 'Must be one of : none, training, solo, certified, major, cantrain'
        example: certified
        type: string
      cid:
        example: 876594
        type: integer
      controllerType:
        description: 'Must be one of: none, active, inactive, loa'
        example: home
        type: string
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      ctrCertification:
        description: 'Must be one of : none, training, solo, certified, major, cantrain'
        example: none
        type: string
      delCertification:
        description: 'Must be one of : none, training, solo, certified, major, cantrain'
        example: certified
        type: string
      discord_id:
        example: "123456789012345678"
        type: string
      division:
        example: USA
        type: string
      email:
        example: wm@denartcc.org
        type: string
      firstname:
        example: Daniel
        type: string
      gndCertification:
        description: 'Must be one of : none, training, solo, certified, major, cantrain'
        example: certified
        type: string
      lastname:
        example: Hawton
        type: string
      lclCertification:
        description: 'Must be one of : none, training, solo, certified, major, cantrain'
        example: certified
        type: string
      oi:
        example: DH
        type: string
      rating:
        $ref: '#/definitions/models.Rating'
      region:
        example: AMAS
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      status:
        description: 'Must be one of: none, active, inactive, loa'
        example: active
        type: string
      subdivision:
        description: This may be blank
        example: ZDV
        type: string
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      updateid:
        description: Internally used identifier during scheduled updates for removals
        type: string
    type: object
  response.R:
    properties:
      data: {}
      status:
        type: string
    type: object
host: network.denartcc.org
info:
  contact:
    email: daniel@hawton.org
    name: Daniel Hawton
  description: Session Cookie
  license:
    name: Apache
    url: https://github.com/adh-partnership/api/blob/main/LICENSE
  title: ADH API
  version: "1.0"
paths:
  /live/:facility:
    get:
      parameters:
      - description: Facility, defaults to ZDV if no facility id provided
        in: path
        name: fac
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github.com_adh-partnership_api_internal_v1_overflight.Flightsv1'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Overflights for Facility [Legacy/Deprecated]
      tags:
      - overflight
  /v1/events:
    get:
      description: Get Upcoming Events
      parameters:
      - description: Limit to X events, default 5 (max 10)
        in: query
        name: limit
        type: number
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Events
      tags:
      - Events
    post:
      description: Create an event
      parameters:
      - description: Event Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.EventRequest'
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Create Event
      tags:
      - Events
  /v1/events/{id}:
    delete:
      description: Delete an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Delete Event
      tags:
      - Events
    get:
      description: Get an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Event
      tags:
      - Events
    patch:
      description: Patch an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Event Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.EventRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Patch Event
      tags:
      - Events
  /v1/events/{id}/positions:
    get:
      description: Get Positions for an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventPosition'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Event Positions
      tags:
      - Events
    post:
      description: Add a position to an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Position. CID 0 means unassigned.
        in: body
        name: position
        required: true
        schema:
          $ref: '#/definitions/dto.EventPositionRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Add Event Position
      tags:
      - Events
  /v1/events/{id}/positions/{position}:
    delete:
      description: Delete a position from an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Position Name
        in: path
        name: position
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Delete Event Position
      tags:
      - Events
    put:
      description: Update a position for an event.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Position Name
        in: path
        name: position
        required: true
        type: string
      - description: Position. CID 0 means unassigned.
        in: body
        name: position
        required: true
        schema:
          $ref: '#/definitions/dto.EventPositionRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Update Event Position
      tags:
      - Events
  /v1/events/{id}/signup:
    delete:
      description: Delete User Signup. This will only work for the logged in user.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Delete User Signup
      tags:
      - Events
    post:
      description: Create/Edit User Signup for Event. This will only work for the
        logged in user.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Signup
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/dto.EventSignupRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Create/Edit User Signup for Event
      tags:
      - Events
  /v1/overflight:
    get:
      parameters:
      - description: Facility, defaults to ZDV if no facility id provided
        in: path
        name: fac
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github.com_adh-partnership_api_internal_v1_overflight.Flightsv1'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Overflights for Facility
      tags:
      - overflight
  /v1/overflight/:facility:
    get:
      parameters:
      - description: Facility, defaults to ZDV if no facility id provided
        in: path
        name: fac
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github.com_adh-partnership_api_internal_v1_overflight.Flightsv1'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Overflights for Facility
      tags:
      - overflight
  /v1/storage:
    post:
      parameters:
      - description: Storage Object
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/dto.StorageRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Document'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Create storage object
      tags:
      - storage
  /v1/storage/:category:
    get:
      parameters:
      - description: Category, if applicable
        in: path
        name: category
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Document'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Storage Listing
      tags:
      - storage
  /v1/storage/:id:
    delete:
      parameters:
      - description: Storage ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/response.R'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Delete storage object
      tags:
      - storage
    put:
      parameters:
      - description: Storage Object
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/dto.StorageRequest'
      - description: Storage ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Document'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Update storage object
      tags:
      - storage
  /v1/storage/:id/file:
    put:
      parameters:
      - description: Storage ID
        in: path
        name: id
        required: true
        type: integer
      - description: File
        in: formData
        name: file
        required: true
        type: file
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Upload file data to storage object
      tags:
      - storage
  /v1/user/:cid:
    get:
      parameters:
      - description: CID, defaults to logged in user
        in: path
        name: cid
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get User Information, if cid is not provided, defaults to logged in
        user
      tags:
      - user
    patch:
      consumes:
      - application/json
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserResponse'
      - description: CID
        in: path
        name: cid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Patch User Information
      tags:
      - user
  /v1/user/:cid/roles:
    get:
      parameters:
      - description: CID, if not provided, defaults to logged in user
        in: path
        name: cid
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get User Information
      tags:
      - user
  /v1/user/:cid/roles/:role:
    delete:
      parameters:
      - description: Role
        in: path
        name: role
        required: true
        type: string
      - description: CID
        in: path
        name: cid
        required: true
        type: string
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Remove User Role
      tags:
      - user
    put:
      parameters:
      - description: Role
        in: path
        name: role
        required: true
        type: string
      - description: CID
        in: path
        name: cid
        required: true
        type: string
      responses:
        "204":
          description: ""
        "309":
          description: ""
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Add User Role
      tags:
      - user
  /v1/user/all:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Full Roster
      tags:
      - user
  /v1/user/login:
    get:
      parameters:
      - description: Redirect URL
        in: path
        name: redirect
        type: string
      responses:
        "307":
          description: ""
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Login to account
      tags:
      - user
      - oauth
  /v1/user/login/callback:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.R'
        "307":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.R'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Login callback
      tags:
      - user
      - oauth
  /v1/user/roster:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Facility Roster
      tags:
      - user
  /v1/user/staff:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.FacilityStaffResponse'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.R'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.R'
      summary: Get Facility Staff
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
